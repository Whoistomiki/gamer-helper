const { User, Otp } = require("../models");
const getToken = require("../helper/otpGenerator");
const sendingMail = require("../helper/mailSender");
const bcrypt = require("bcrypt");

const userController = {
  getUser: async (req, res) => {
    const user = await User.findByPk(req.params.id);
    if (!user) {
      res.status(400).json(`User not found`);
      return;
    }
    res.status(200).json(user);
  },
  
  // GetUser allows you to retrieve a user based on their ID.
  // The function uses the Sequelize database framework to execute a "findByPk" query on the user model,
  // The "findByPk" method allows you to retrieve a user based on their ID
  // If the user is not found, the function sends an HTTP status of 400 and a message indicating that the user was not found
  // Or the function returns the user's data in JSON format
  // The password is not returned because it is not necessary to display it on the front with PlainUser we can show all the data except the password
  // The spreadoperator is an operator Javascript represents by ('...'), it is used to extend an existing object by including the properties of another object

  modifyUser: async (req, res) => {
    const userId = req.params.id;
    const { firstname, lastname, pseudo, email, password, biography } =
      req.body;
    const user = await User.findByPk(userId);
    console.log(" etape1", password);
    if (!user) {
      res.status(404).json(`Can't find user with id ${userId}`);
    } else {
      if (firstname) {
        user.firstname = firstname;
      }
      if (lastname) {
        user.lastname = lastname;
      }
      if (pseudo) {
        user.pseudo = pseudo;
      }
      if (email) {
        user.email = email;
      }
      if (password) {
        user.password = await bcrypt.hash(password, 10);
      }
      if (biography) {
        user.biography = biography;
      }
      console.log(" etape2", password);
      await user.save();

      res.status(200).json(user.toJSON()); // TODO: utiliser JSON.stringify
    }
  },

  // ModifyUser allows you to update user firstname, lastname, pseudo, email and password, The function uses the Sequelize database framework
  // To execute an "user.update" query on the user model
  // The "where:id:userID" in "user.update" method allows you to retrieve a user based on their ID
  // If the user is not found, the function sends an HTTP status of 404 and a message indicating that the user can't be found.
  // Or the function returns the user's update and save data in JSON format

  confirmationDeleteUser: async (req, res) => {
    const userId = req.params.id;
    const user = await User.findByPk(userId);
    const token = getToken();
    sendingMail(token);
    res.status(200).json(token);
  },

  // ConfirmationDeleteUser allow you to send a token to the user's email
  // The function uses the Sequelize database framework to execute a "findByPk" query on the user model
  // The "findByPk" method allows you to retrieve a user based on their ID
  // The token is generated by the getToken function from otpGenerator.js
  // The token is sent to the user's email by the sendingMail function from mailSender.js
  // The function sends an HTTP status of 200 and the token

  deleteUser: async (req, res) => {
    const userId = req.params.id;

    const user = await User.destroy({ where: { id: userId } });
    res.status(200).json(`User profile has been deleted`);
  },

  // DeleteUser allow you to delete the user
  // The function uses the Sequelize database framework to execute a "destroy" query on the User model
  // The destroy method allows you to delete a user based on their ID
  // The function sends an HTTP status of 200 and a message indicating that the user has been deleted

  modifyBiography: async (req, res) => {
    const userId = req.params.id;
    const { biography } = req.body;
    const user = await User.findByPk(userId);
    if (!user) {
      res.status(404).json(`Can't find user biography`);
    } 
      if (biography) {
        user.biography = biography;
      

      await user.save();
      res.status(200).json(user.toJSON());
    }
  },

  // ModifyBiography allow you to update user biography
  // The function uses the Sequelize database framework to execute a "findByPk" query on the user model
  // The "findByPk" method allows you to retrieve a user based on their ID
  // If the user is not found, the function sends an HTTP status of 404 and a message indicating that the user biography can't be found.
  // Or the function returns the user's update and save data in JSON format
};

module.exports = userController;
// Export the controller in the userRouter
